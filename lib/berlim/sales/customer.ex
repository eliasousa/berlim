defmodule Berlim.Sales.Customer do
  @moduledoc """
  Embedded schema representing Customer of a Order
  """

  use Ecto.Schema
  import Ecto.Changeset
  alias Berlim.Sales.Customer

  @primary_key {:tax_document, :string, autogenerated: false}

  embedded_schema do
    field(:fullname, :string)
    field(:email, :string)
    field(:phone, :string)
    field(:address_street, :string)
    field(:address_street_number, :string)
    field(:address_complement, :string)
    field(:address_city_code, :integer)
    field(:address_city_name, :string)
    field(:address_state, :string, default: "SE")
    field(:address_zipcode, :string)
    field(:address_district, :string)
    field(:address_country, :string, default: "BRA")
    field(:payment_service_customer_id, :string)
  end

  @doc false
  def changeset(%Customer{} = customer, attrs) do
    customer
    |> cast(attrs, [
      :fullname,
      :email,
      :phone,
      :tax_document,
      :address_street,
      :address_street_number,
      :address_complement,
      :address_district,
      :address_city_code,
      :address_city_name,
      :address_state,
      :address_zipcode
    ])
    |> validate_required([
      :fullname,
      :email,
      :phone,
      :tax_document,
      :address_street,
      :address_street_number,
      :address_district,
      :address_state,
      :address_city_code,
      :address_zipcode
    ])
    |> update_change(:tax_document, &String.replace(&1, ~r/[^0-9]/, ""))
    |> validate_length(:fullname, max: 90)
    |> validate_length(:email, max: 45)
  end
end
